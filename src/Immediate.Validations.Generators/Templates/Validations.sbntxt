using System.Collections.Generic;
using Immediate.Validations.Shared;

#nullable enable
#pragma warning disable CS1591

{{~ if !string.empty namespace ~}}
namespace {{ namespace }};

{{~ end ~}}
{{~ for c in outer_classes ~}}
partial {{ c.type }} {{ c.name }}
{
{{~ end ~}}

partial {{ class.type }} {{ class.name }}
{
	static ValidationResult IValidationTarget<{{ class.name }}>.Validate({{ class.name; if is_reference_type; "?"; end }} target) =>
		Validate(target);

	public static {{ if class.type == "interface"; "new"; end }} ValidationResult Validate({{ class.name; if is_reference_type; "?"; end }} target)
	{
		{{~ if is_reference_type ~}}
		if (target is not { } t)
		{
			return new()
			{
				{ ".self", "`target` must not be `null`." },
			};
		}
		{{~ else ~}}
		var t = target;
		{{~ end ~}}
		
		var errors = new ValidationResult();

		{{~ for bc in base_validation_targets ~}}
		foreach (var error in {{ bc }}.Validate(t))
			errors.Add(error);
		{{~ end ~}}

		{{~ for p in properties ~}}
		__Validate{{ p.property_name }}(errors, t, t.{{ p.property_name }});
		{{~ end ~}}

		{{~ if has_additional_validations_method ~}}
		AdditionalValidations(errors, t);
		{{~ end ~}}

		return errors;
	}

		{{~
			func validate(p, target, property_name, name)
		~}}
		{
			if (!{{ p.validator_name }}.ValidateProperty(
					{{ target }}
					{{~ for param in p.arguments ~}}
					, {{ param.named_parameter_name; param.value }}
					{{~ end ~}}
				)
			)
			{
				errors.Add(
					{{ property_name }},
					{{ if string.empty p.message; p.validator_name + ".DefaultMessage"; else; p.message; end }},
					new()
					{
						["PropertyName"] = {{ name }},
						["PropertyValue"] = {{ target }},
						{{~ for a in p.arguments ~}}
						{{~ if !string.empty a.parameter_name ~}}
						["{{ a.parameter_name }}Name"] = "{{ a.name }}",
						{{~ if !string.empty a.array_type ~}}
						["{{ a.parameter_name }}Value"] = string.Join<{{ a.array_type }}>(", ", {{ a.value }}),
						{{~ else ~}}
						["{{ a.parameter_name }}Value"] = {{ a.value }},
						{{~ end ~}}
						{{~ end ~}}
						{{~ end ~}}
					}
				);
			}
		}
		{{~ end ~}}

	{{~
		func get_prop_name(prop_name, depth)
			if depth != 0
				for i in 1..depth
					prop_name = prop_name + $"[\{counter{i - 1}}]"
				end
			end
			ret prop_name
		end
	~}}

	{{~ func validate_property(p, depth = 0) ~}}
	{{- if p.collection_property_details; validate_property(p.collection_property_details, depth + 1); end ~}}
	private static void __Validate{{ p.property_name }}{{ if depth != 0; for i in 1..depth; "0"; end; end }}(
		ValidationResult errors, {{ class.name }} instance, {{ p.type_full_name }} target{{ if depth != 0; for i in 1..depth }}, int counter{{i-1}}{{ end; end }}
	)
	{
		{{~ 
			for v in p.null_validations
				validate(v, "target", $"$\"{get_prop_name(p.property_name, depth)}\"", $"$\"{get_prop_name(p.name, depth)}\"")
			end
		~}}

		{{~ if p.is_reference_type || p.is_nullable ~}}
		if (target is not { } t)
		{
			{{~ if !p.is_nullable ~}}
			errors.Add(
				$"{{ get_prop_name(p.property_name, depth) }}",
				$"'{{ get_prop_name(p.name, depth) }}' must not be null."
			);
			{{~ end ~}}

			return;
		}
		{{~ else ~}}
		var t = target;
		{{~ end ~}}

		{{~ if p.is_validation_property ~}}
		foreach (var error in {{ p.validation_type_full_name }}.Validate(t))
		{
			errors.Add(error with 
			{
				PropertyName = string.IsNullOrWhiteSpace(error.PropertyName)
					? $"{{ get_prop_name(p.property_name, depth) }}"
					: $"{{ get_prop_name(p.property_name, depth) }}.{error.PropertyName}",
			});
		}
		{{~ end ~}}

		{{~ if p.collection_property_details ~}}
		var counter{{depth}} = 0;
		foreach (var item{{depth}} in t)
		{
			__Validate{{ p.property_name }}{{ for i in 1..(depth + 1); "0"; end }}(
				errors, instance, item{{depth}}{{ for i in 1..(depth + 1) }}, counter{{ i - 1 }}{{ end }}
			);
			counter{{depth}}++;
		}
		{{~ end ~}}

		{{~ 
			for v in p.validations
				validate(v, "t", $"$\"{get_prop_name(p.property_name, depth)}\"", $"$\"{get_prop_name(p.name, depth)}\"")
			end
		~}}
	}

	{{~ end ~}}
	{{~ 
		for p in properties
			validate_property(p)
		end 
	~}}
}

{{~ for c in outer_classes ~}}
}
{{~ end ~}}
